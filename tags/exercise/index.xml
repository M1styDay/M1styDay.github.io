<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Exercise on M1sty</title>
    <link>https://www.m1sty.com/tags/exercise/</link>
    <description>Recent content in Exercise on M1sty</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 08 Mar 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://www.m1sty.com/tags/exercise/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>PageRank：Exercise</title>
      <link>https://www.m1sty.com/2021/dm_pagerank_2_exercise/</link>
      <pubDate>Mon, 08 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.m1sty.com/2021/dm_pagerank_2_exercise/</guid>
      <description>Simple Wev Graph and its Matrix System of Linear Equations PageRank Algorithm </description>
    </item>
    
    <item>
      <title>Clusterings：Exercise</title>
      <link>https://www.m1sty.com/2021/dm_clusterings_2_exercise/</link>
      <pubDate>Tue, 09 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.m1sty.com/2021/dm_clusterings_2_exercise/</guid>
      <description>Clusterings K-Means Algorithm Input Points Centroids Reclustering step 1 Recomputing centroids step 2 Recomputing the centroids step 3 Final Clustering K-Means++: Main Intuition Probaility distribution Sampling points Examples K-means- To understand why K-means++ use some randomness we compare it against the following algorithm which we call it K-means–:
The algorithm selects the first point randomly. Let t be any step of the algorithm, with 2 ≤ t &amp;lt; k. Let C be the set of points chosen at step t.</description>
    </item>
    
    <item>
      <title>Association：Exercise</title>
      <link>https://www.m1sty.com/2021/dm_association_2_exercise/</link>
      <pubDate>Mon, 04 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.m1sty.com/2021/dm_association_2_exercise/</guid>
      <description>Naive Algorithm Pass 1 Support treshold：2
Pass 2 Support treshold：2
Pass 3 Support treshold：2
A-priori Algorithm Pass 1 Pass 2 Pass 3 PCY Algorithm Input Data Pass 1 Pass 2 The remaining passes The remaining passes are the same of A-priori
SON Algorithm Introduction Let s be the support threshold:
 Pass 1:  Divide the dataset into k chunks, let $p_i$ be such that the ith chunk contains a fraction of pi of the input dataset.</description>
    </item>
    
  </channel>
</rss>
