<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SVM on M1sty</title>
    <link>https://www.m1sty.com/tags/svm/</link>
    <description>Recent content in SVM on M1sty</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 04 May 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://www.m1sty.com/tags/svm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SVM：Practise</title>
      <link>https://www.m1sty.com/2021/dm_svm_4_practise/</link>
      <pubDate>Tue, 04 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.m1sty.com/2021/dm_svm_4_practise/</guid>
      <description>SVM模型 SVM模型的思想和理论 模型介绍 超平面的理解:在一维空间中，如需将数据切分为两段，只需要一个点即可;在二维空间中，对于线性可分的样本点，将其切分为两类，只需一条直线即 可;在三维空间中，将样本点切分开来，就需要一个平面。
距离计算 思想介绍  图中绘制了两条分割直线,利用这两条直线,可以方便地将样本点所属的类别判断出来。虽然从直观上来看这两条分割线都没有问题,但是哪一条直线的分类效果更佳呢(训练样本点的分类效果一致,并不代表测试样本点的分类效果也一样)?甚至于在直线l1和l2之间还存在无数多个分割直线,那么在这么多的分割线中是否存在一条最优的“超平面”呢?   假设直线是l1和l2之间的某条直线(分割面),为了能够寻找到最优的分割面l2,需要做三件事,首先计算两个类别中的样本点到直线li的距离;然后从两组距离中各挑选出一个最短的(如图中所示的距离d1和d2),继续比较d1和d2,再选出最短的距离(如图中的d1),并以该距离构造“分割带”(如图中经平移后的两条虚线);最后利用无穷多个分割直线li,构造无穷多个“分割带”,并从这些“分割 带”中挑选出带宽最大的li。  分隔带  “分割带”代表了模型划分样本点的能力或可信度，“分割带”越宽，说明模型能够将样本点划分得越清晰，进而保证模型泛化能力越强，分类的可信度越高;反之，“分割带”越窄，说明模型的准确率越容易受到异常点的影响，进而理解为模型的预测能力越弱，分类的可信度越低。  目标函数 函数间隔  将图中五角星所代表的正例样本用1表示,将实心圆所代表的负例样本用-1表示;实体加粗直线表示某条分割面;两条虚线分别表示因变量y取值为+1和-1时的情况,它们与分割面平行。 不管是五角星代表的样本点,还是实心圆代表的样本点,这些点均落在两条虚线以及虚线之外,则说明这些点带入到方程w&amp;rsquo;x+b所得的绝对值一定大于等于1 进而可以说明如果点对应的取值越小于-1,该样本为负例的可能性越高;点对应的取值越大于+1,样本为正例的可能性越髙。   其中,yi表示样本点所属的类别,用+1和-1表示当w&amp;rsquo;xi+b计算的值小于等于-1时,根据分割面可以将样本点xi对应的yi预测为-1;当w&amp;rsquo;xi+b计算的值大于等于+1时,分割面会将样本点xi对应的yi预测为+1。故利用如上的乘积公式可以得到线性可分的SVM所对应的函数间隔满足yi≥1的条件。  几何间隔  当分割面中的参数w和b同比例增加时,所对应的γ值也会同比例增加,但这样的增加对分割面W&amp;rsquo;x+b=0来说却丝毫没有影响。 所以,为了避免这样的问题,需要对函数间隔做约束,常见的约束为单位化处理。  线性可分的SVM 目标函数 目标函数的等价转换 基于拉格朗日乘子法的目标函数 拉格朗日乘子法 目标函数求解 函数介绍 非线性可分的SVM 目标函数 目标函数的求解 核函数 函数介绍 实操 案例1 案例2 # 导入第三方模块 from sklearn import svm import pandas as pd from sklearn import model_selection from sklearn import metrics # 读取外部数据 letters = pd.</description>
    </item>
    
  </channel>
</rss>
